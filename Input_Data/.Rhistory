shiny::runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
print("\u09F3")
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
dollar.sign<-currency$symbol[currency$Country=="Thailand"]
print("\u0E3F")
test<-"\u0E3F"
print(test)
print(paste(test, 1231))
as.character("\u0E3F")
as.character(\u0E3F)
as.character("\u0E3F")
currencies <- read.csv("~/RTSL 2.0/HTN_demo/currencies.csv", stringsAsFactors=FALSE)
View(currencies)
print(currency$symbol[currency$Country=="Thailand"])
print(currencies$symbol[currencies$Country=="Thailand"])
currencies <- read.csv("~/RTSL 2.0/HTN_demo/currencies.csv", stringsAsFactors=FALSE)
View(currencies)
test<-paste("\u", currencies$symbol[currencies$Country=="Thailand"])
print(test)
test<-paste0("\u", currencies$symbol[currencies$Country=="Thailand"])
test<-paste("\u", currencies$symbol[currencies$Country=="Thailand"])
print(test)
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp()
dollar.sign<-"\u0E3F"
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = ~1:3, y = ~10*(1:3), name = "slope of 10")
fig <- fig %>% add_lines(x = ~2:4, y = ~1:3, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(x = ~1:3, y = ~10*(1:3), name = "slope of 10")%>%
add_trace(x = ~2:4, y = ~1:3, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
df<-data.frame(
x=1:3,
y=10*(1:3),
y2=1:3
)
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~y2 name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~y2, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~y2, name = "slope of 1")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~y2, name = "slope of 1", yaxis = "adfg")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~y2, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~yy, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter', yaxis="y")%>%
add_trace(y = ~yy, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~yy, name = "slope of 1")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
df<-data.frame(
x=1:3,
y=10*(1:3),
yy=1:3
)
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~yy, name = "slope of 1")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~yy, name = "slope of 1", yaxis="y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df, x = ~x, y = ~y, name = "slope of 10", type = 'scatter')%>%
add_trace(y = ~yy, name = "slope of 1")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_lines(x = ~1:3, y = ~10*(1:3), name = "slope of 10")
fig <- fig %>% add_lines(x = ~2:4, y = ~1:3, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly()
fig <- fig %>% add_trace(x = ~1:3, y = ~10*(1:3), name = "slope of 10")
fig <- fig %>% add_trace(x = ~2:4, y = ~1:3, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df)
fig<-fig%>%add_trace(x = ~x, y = ~y, name = "slope of 10")%>%
add_trace(y = ~yy, name = "slope of 1")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df)
fig<-fig%>%add_trace(x = ~x, y = ~y, name = "slope of 10")%>%
add_trace(x=~xy = ~yy, name = "slope of 1", type="scatter")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df)
fig<-fig%>%add_trace(x = ~x, y = ~y, name = "slope of 10")%>%
add_trace(x=~x = ~yy, name = "slope of 1", type="scatter")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df)
fig<-fig%>%add_trace(x = ~x, y = ~y, name = "slope of 10")
fig<-fig%>%add_trace(x= ~x, = ~yy, name = "slope of 1")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly(df)
fig<-fig%>%add_trace(x = ~x, y = ~y, name = "slope of 10")
fig<-fig%>%add_trace(x= ~x, = ~yy, name = "slope of 1", yaxis="y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly()
fig<-fig%>%add_trace(x = df$x, y = df$y, name = "slope of 10")
fig<-fig%>%add_trace(x= df$x, = df$yy, name = "slope of 1", yaxis="y2")
fig<-fig%>%add_trace(x= df$x, y= df$yy, name = "slope of 1", yaxis="y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
ay <- list(
tickfont = list(color = "red"),
overlaying = "y",
side = "right",
title = "second y axis"
)
fig <- plot_ly()
fig <- fig %>% add_trace(x = ~1:3, y = ~10*(1:3), name = "slope of 10")
fig <- fig %>% add_trace(x = ~2:4, y = ~1:3, name = "slope of 1", yaxis = "y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
df<-data.frame(
x=1:3,
y=10*(1:3),
xx=2:4,
yy=1:3
)
fig <- plot_ly()
fig<-fig%>%add_trace(x = df$x, y = df$y, name = "slope of 10")
fig<-fig%>%add_trace(x= df$xx, y= df$yy, name = "slope of 1", yaxis="y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
xaxis = list(title="x")
)
fig
fig <- plot_ly()
fig<-fig%>%add_trace(x = df$x, y = df$y, name = "slope of 10")
fig<-fig%>%add_trace(x= df$xx, y= df$yy, name = "slope of 1", yaxis="y2")
fig <- fig %>% layout(
title = "Double Y Axis", yaxis2 = ay,
yaxis = list(title="yyy"),
xaxis = list(title="x")
)
fig
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
runApp('RTSL 2.0/HTN_demo')
setwd("~/NCD-Countdown/Input_Data")
library(readxl)
library(vroom)
library(dplyr)
library(pdftools)
library(tidyverse)
a<-pdf_text("WHO_TFA_report.pdf") %>%
readr::read_lines()
a[1]
a[500]
a[1000]
a[1500]
a[1400]
a[1300]
a[1290]
a[1291]
a[1292]
a[1290]
a[1291]
a[1289]
a[1500]
a[1550]
a[1551]
a[1600]
a[1800]
a[1700]
a[1700]
a[1750]
a[1775]
a[1800]
a[1825]
a[1900]
a[1940]
a[1920]
a[1910]
a[1911]
a[1912]
a[1913]
a[1911]
a[1910]
a<-a[-c(1:1290, 1911:1962)]
library(stringr)
a[4]
a[6]
a[5]
a[6]
a[7]
all_stat_lines <- PDF.grass[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
all_stat_lines <- a[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
View(all_stat_lines)
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("tfa_coverage.xslx")
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("tfa_coverage.xlsx")
View(tfa)
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("tfa_coverage.xlsx", skip=1 )
View(tfa)
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("tfa_coverage.xlsx", skip=1 )
View(tfa)
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("tfachd.csv", stringsAsFactors = F)
chd<-read.csv("tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
View(tfa)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-0.27*tfa$CHD[tfa$Score==3]/100
tfa$mmort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
View(tfa)
#efficacy based on this paper:
tfa_eff<-0.27
#efficacy based on this paper:
tfa_eff<-0.27
a<-pdf_text("WHO_TFA_report.pdf") %>%
readr::read_lines()
a<-a[-c(1:1290, 1911:1962)]
all_stat_lines <- a[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
a<-pdf_text("WHO_TFA_report.pdf") %>%
readr::read_lines()
a<-a[-c(1:1290, 1911:1962)]
a<-pdf_text("WHO_TFA_report.pdf") %>%
readr::read_lines()
a<-a[-c(1:1290, 1911:1962)]
all_stat_lines <- a[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
View(tfa)
#efficacy based on this paper: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4581646/
tfa_eff<-0.297
a<-pdf_text("WHO_TFA_report.pdf") %>%
readr::read_lines()
a<-a[-c(1:1290, 1911:1962)]
all_stat_lines <- a[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
shiny::runApp('~/RTSL 2.0/HTN_demo')
runApp('~/RTSL 2.0/HTN_demo')
runApp('~/RTSL 2.0/HTN_demo')
runApp('~/RTSL 2.0/HTN_demo')
runApp('~/RTSL 2.0/HTN_demo')
runApp('~/RTSL 2.0/HTN_demo')
runApp('~/RTSL 2.0/HTN_demo')
