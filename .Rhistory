}
if(int$`salt policy: FOPL`[i]=="no"){
int$foplRRR[i]<-FOPL
}
else{
int$foplRRR[i]<-0
}
if(int$`salt policy: public awareness pgm`[i]=="no"){
int$mediaRRR[i]<-media
}
else{
int$mediaRRR[i]<-0
}
}
#calculate number of g sodium reduced
int$reduced<-int$NAintake*(int$reformRRR+int$envRRR+int$foplRRR+int$mediaRRR)
int$target<-int$NAintake-int$reduced
int$reduxadj<-NA
#if target below 3, adjusted sodium reducfion
for (i in 1:194){
if (int$target[i]<3 & !is.na(int$target[i])){
int$reduxadj[i]<-int$NAintake[i]-3
}
else if (is.na(int$target[i])){
int$reduxadj[i]<-NA
}
else{
int$reduxadj[i]<-int$reduced[i]
}
}
int$reduxadj[int$reduxadj<0]<-0
#mortality impact based on https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7601012/
int$mort.redux<-(1-(1/1.06))*int$reduxadj
write.csv(int%>%select(c(iso, country, mort.redux)), "new_inuputs/salt_effects2.csv", row.names = F)
write.csv(int%>%select(c(iso, country, mort.redux)), "new_inputs/salt_effects2.csv", row.names = F)
a<-pdf_text("new_inputs/source data/WHO_TFA_report.pdf") %>%
readr::read_lines()
a<-pdf_text("new_inputs/source data/WHO TFA report.pdf") %>%
readr::read_lines()
a<-a[-c(1:1290, 1911:1962)]
all_stat_lines <- a[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("new_inputs/source data/tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
#efficacy based on this paper: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4581646/
tfa_eff<-0.297
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("new_inputs/source data/tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
write.csv(tfa%>%select(c(iso, mort.redux)), "new_inputs/tfa_effects.csv", row.names = F)
View(tfa)
names(int)
names(int)[1]<-"iso3"
write.csv(int%>%select(c(iso, country, mort.redux)), "new_inputs/salt_effects.csv", row.names = F)
write.csv(int%>%select(c(iso3, country, mort.redux)), "new_inputs/salt_effects.csv", row.names = F)
#update country names
countries<-read.csv("new_inputs/Country_groupings.csv")
View(countries)
View(tfa)
#update country names
countries<-read.csv("new_inputs/Country_groupings.csv")%>%select(c(iso3, Country))
tfa<-left_join(tfa, countries, by="Country")
View(tfa)
tfa$iso3[tfa$Country=="United States of America"]<-"USA"
tfa$iso[tfa$Country=="Iran (Islamic Republic of)"]<-"IRN"
tfa$iso3[tfa$Country=="Iran (Islamic Republic of)"]<-"IRN"
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("new_inputs/source data/tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
#update country names
countries<-read.csv("new_inputs/Country_groupings.csv")%>%select(c(iso3, Country))
tfa<-left_join(tfa, countries, by="Country")
tfa$iso3[tfa$Country=="United States of America"]<-"USA"
tfa$iso3[tfa$Country=="Iran (Islamic Republic of)"]<-"IRN"
count(is.na(tfa$iso3))
length(is.na(tfa$iso3))
tfa$iso3[tfa$Country=="Republic of Korea"]<-"KOR"
tfa$iso3[tfa$Country=="	Bolivia (Plurinational State of)"]<-"BOL"
tfa$iso3[tfa$Country=="Bolivia (Plurinational State of)"]<-"BOL"
tfa$iso3[tfa$Country=="Venezuela (Bolivarian Republic of)"]<-"VEN"
View(sodium.intake)
tfa$iso3[tfa$Country=="Syrian Arab Republic"]<-"SYR"
#update country names
countries<-read.csv("new_inputs/Country_groupings_extended.csv")
View(countries)
names(countries)
full<-countries%>%gather(Location..GBD.,Country..WB.,Country..WHO., gbd2019, -iso3, -LocID)
View(full)
full<-countries%>%gather(Location..GBD.,Country..WB.,Country..WHO., gbd2019, -Super_region, -Region)
full<-countries%>%gather("source", Location..GBD.,Country..WB.,Country..WHO., gbd2019, -Super_region, -Region)
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCDregion, -SDI, -World_bank_2015)
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015)
full<-countries%>%gather("source", "country", -iso3)
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCDregion, -SDI, -World_bank_2015, -iso3)
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015, -iso3)
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015, -iso3, -LocID)
names(countries)
names(countries)[3]
names(countries)[3]<-"gbd2017"
names(countries)
names(countries)[4]<-"WB2015"
names(countries)[5]<-"WHO"
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015, -iso3, -LocID)
unique(full$source)
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015, -iso3, -LocID)%>%
select(c(source, country, iso3, LocID))
unique<-unique(full%>%select(c(country, iso3, LocID)))
View(unique)
unique<-na.omit(unique(full%>%select(c(country, iso3, LocID))))
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("new_inputs/source data/tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
tfa<-left_join(tfa, unique, by="Country")
tfa<-left_join(tfa, unique%>%rename(Country=country), by="Country")
View(tfa)
any(is.na(tfa))
which(is.na(tfa))
(is.na(tfa))
any(is.na(tfa))
not<-(is.na(tfa))
View(not)
not<-which(is.na(tfa))
nas<-tfa$Country[is.na(tfa$iso3)]
nas<-data.frame(
country=tfa$Country[is.na(tfa$iso3)],
iso3=NA,
LocID=NA
)
View(nas)
View(unique)
tfa$Country
nas$Country
nas$country
nas<-data.frame(
country=tfa$Country[is.na(tfa$iso3)],
iso3=c("SMR", "MCO", "VCT",
"KNA", "NRU", "MKD",
"TUV", "PRK", "PLW",
"NIU", "COK", "CPV"),
LocID=NA,
source="misc"
)
View(tfa)
nas<-data.frame(
country=tfa$Country[is.na(tfa$iso3)],
iso3=c("SMR", "MCO", "VCT",
"KNA", "NRU", "MKD",
"TUV", "PRK", "PLW",
"NIU", "COK", "CPV"),
LocID=NA
)
unique<-bind_rows(nas, unique)
tfa<-left_join(tfa, unique)
View(tfa)
tfa<-left_join(tfa, unique%>%rename(Country=country))
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("new_inputs/source data/tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
#update country names
countries<-read.csv("new_inputs/Country_groupings_extended.csv")
names(countries)
names(countries)[3]<-"gbd2017"
names(countries)[4]<-"WB2015"
names(countries)[5]<-"WHO"
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015, -iso3, -LocID)%>%
select(c(source, country, iso3, LocID))
unique<-na.omit(unique(full%>%select(c(country, iso3, LocID))))
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
tfa<-left_join(tfa, unique%>%rename(Country=country), by="Country")
View(tfa)
nas<-data.frame(
country=tfa$Country[is.na(tfa$iso3)],
iso3=c("SMR", "MCO", "VCT",
"KNA", "NRU", "MKD",
"TUV", "PRK", "PLW",
"NIU", "COK", "CPV"),
LocID=NA
)
unique<-bind_rows(nas, unique)
tfa<-left_join(tfa, unique%>%rename(Country=country))
View(tfa)
View(unique)
tfa<-left_join(tfa, unique%>%rename(Country=country)%>%select(c(Country, iso3)))
View(tfa)
tfa<-left_join(tfa%>%select(-iso3), unique%>%rename(Country=country)%>%select(c(Country, iso3)), by="Country")
View(tfa)
any(is.na(tfa$iso3))
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
write.csv(tfa%>%select(c(iso3, Country, mort.redux)), "new_inputs/tfa_effects.csv", row.names = F)
#combine
names(int)
#################
#add to tobacco and alcohol data and just take NCD4 causes
################
tob<-read.csv("Input_Data/tobaccoandalcohol_efficacy7.csv", stringsAsFactors = F)
#################
#add to tobacco and alcohol data and just take NCD4 causes
################
tob<-read.csv("/Input_Data/tobaccoandalcohol_efficacy7.csv", stringsAsFactors = F)
#################
#add to tobacco and alcohol data and just take NCD4 causes
################
tob<-read.csv("Input_Data/tobaccoandalcohol_efficacy5.csv", stringsAsFactors = F)
View(tob)
unique(tob$Country)
tobacco_countries<-unique(tob$Country)
salt_countries<-unique(int$country)
tfa_countries<-unique(tfa$Country)
View(unique)
tob<-left_join(tob, unique%>%rename(Country=country)%>%select(Country, iso3), by="Country")
any(is.na(tob$iso3)
any(is.na(tob$iso3))
int<-read_excel("new_inputs/source data/NCD ccs2019-sodium best buys.xlsx")
sodium.intake<-vroom("new_inputs/source data/Adults (age 25+ years)_ Estimated per capita sodium intake_4-3-2021 11.50.csv",
col_select = c("AreaID", "AreaName", "DataValue"))%>%rename(iso = AreaID, NAintake = DataValue)
#correcting error in JHU data w/ GBD 2019 estimate (not public yet)
sodium.intake$NAintake[sodium.intake$AreaName=="China"]<-6.954027
int<-left_join(int, sodium.intake, by="iso")
#efficacy values from literature
reform_mand<-0.2
reform_vol<-0.15
#LA study, but also similar to 20% redux on meals outside home (assuming
#roughly 1/3 of meals are eaten outside the home...so 20%/3 ~= 7%)
sup_env<-0.07
FOPL<-0.1
media<-0.05
#change NAs to no
int$`salt policy: product reform`[is.na(int$`salt policy: product reform`) |
int$`salt policy: product reform`=="don't know"]<-"no"
int$`salt policy: FOPL`[is.na(int$`salt policy: FOPL`)|
int$`salt policy: FOPL`=="don't know"]<-"no"
int$`salt policy: public awareness pgm`[is.na(int$`salt policy: public awareness pgm`)|
int$`salt policy: public awareness pgm`=="don't know"]<-"no"
int$`salt policy: reg salt content`[is.na(int$`salt policy: reg salt content`)|
int$`salt policy: reg salt content`=="don't know"]<-"no"
#start all no/no countries at voluntary?
int$`salt policy: enforcement`[is.na(int$`salt policy: enforcement`)]<-"voluntary"
int$reformRRR<-NA
for (i in 1:194){
if(int$`salt policy: product reform`[i]=="no" &
int$`salt policy: enforcement`[i]=="mandatory"){
int$reformRRR[i]<-reform_mand
}
#assume don't know ~ voluntary
else if (int$`salt policy: product reform`[i]=="no" &
int$`salt policy: enforcement`[i]=="voluntary" |
int$`salt policy: enforcement`[i]=="don't know"){
int$reformRRR[i]<-reform_vol
}
#bump countries at voluntary up to mandatory? no.
#else if (int$`salt policy: product reform`[i]=="yes" &
#         int$`salt policy: enforcement`[i]=="voluntary"){
#  int$reformRRR[i]<-(reform_mand-reform_vol)*pkg_food
#}
else{
int$reformRRR[i]<-0
}
}
int$envRRR<-NA
int$foplRRR<-NA
int$mediaRRR<-NA
for (i in 1:194){
if(int$`salt policy: reg salt content`[i]=="no"){
int$envRRR[i]<-sup_env
}
else{
int$envRRR[i]<-0
}
if(int$`salt policy: FOPL`[i]=="no"){
int$foplRRR[i]<-FOPL
}
else{
int$foplRRR[i]<-0
}
if(int$`salt policy: public awareness pgm`[i]=="no"){
int$mediaRRR[i]<-media
}
else{
int$mediaRRR[i]<-0
}
}
#calculate number of g sodium reduced
int$reduced<-int$NAintake*(int$reformRRR+int$envRRR+int$foplRRR+int$mediaRRR)
int$target<-int$NAintake-int$reduced
int$reduxadj<-NA
#if target below 3, adjusted sodium reducfion
for (i in 1:194){
if (int$target[i]<3 & !is.na(int$target[i])){
int$reduxadj[i]<-int$NAintake[i]-3
}
else if (is.na(int$target[i])){
int$reduxadj[i]<-NA
}
else{
int$reduxadj[i]<-int$reduced[i]
}
}
int$reduxadj[int$reduxadj<0]<-0
#mortality impact based on https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7601012/
int$mort.redux<-(1-(1/1.06))*int$reduxadj
names(int)[1]<-"iso3"
#efficacy based on this paper: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4581646/
tfa_eff<-0.297
a<-pdf_text("new_inputs/source data/WHO TFA report.pdf") %>%
readr::read_lines()
a<-a[-c(1:1290, 1911:1962)]
all_stat_lines <- a[7:620] %>%
str_squish() %>%
strsplit(split = " ")# remove empty spaces
#ended up using this: https://www.adobe.com/acrobat/online/pdf-to-excel.html
tfa<-read_excel("new_inputs/source data/tfa_coverage.xlsx", skip=1 )
tfa$Score[is.na(tfa$Score)]<-0
tfa<-na.omit(tfa)
chd<-read.csv("new_inputs/source data/tfa_chd.csv", stringsAsFactors = F)
tfa<-bind_cols(tfa, chd)
tfa$mort.redux<-NA
tfa$mort.redux[tfa$Score==4]<-0
tfa$mort.redux[tfa$Score==3]<-tfa_eff*tfa$CHD[tfa$Score==3]/100
tfa$mort.redux[tfa$Score<3]<-tfa$CHD[tfa$Score<3]/100
#update country names
countries<-read.csv("new_inputs/Country_groupings_extended.csv", stringsAsFactors = F)
names(countries)
names(countries)[3]<-"gbd2017"
names(countries)[4]<-"WB2015"
names(countries)[5]<-"WHO"
full<-countries%>%gather("source", "country", -Super_region, -Region, -NCD_region, -SDI, -World_bank_2015, -iso3, -LocID)%>%
select(c(source, country, iso3, LocID))
unique<-na.omit(unique(full%>%select(c(country, iso3, LocID))))
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
tfa<-left_join(tfa, unique%>%rename(Country=country), by="Country")
nas<-data.frame(
country=tfa$Country[is.na(tfa$iso3)],
iso3=c("SMR", "MCO", "VCT",
"KNA", "NRU", "MKD",
"TUV", "PRK", "PLW",
"NIU", "COK", "CPV"),
LocID=NA
)
unique<-bind_rows(nas, unique)
tfa<-left_join(tfa%>%select(-iso3), unique%>%rename(Country=country)%>%select(c(Country, iso3)), by="Country")
any(is.na(tfa$iso3))
View(unique)
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
#################
#add to tobacco and alcohol data and just take NCD4 causes
################
tob<-read.csv("Input_Data/tobaccoandalcohol_efficacy5.csv", stringsAsFactors = F)
tob<-left_join(tob, unique%>%rename(Country=country)%>%select(Country, iso3), by="Country")
any(is.na(tob$iso3))
tob_countries<-left_join(unique(tob$Country), unique%>%rename(Country=country)%>%select(Country, iso3), by="Country")
View(tob)
tob_countries<-bind_cols(unique(tob$Country), unique%>%rename(Country=country)%>%select(Country, iso3), by="Country")
tob_countries<-full_join(unique(tob$Country), unique%>%rename(Country=country)%>%select(Country, iso3), by="Country")
any(is.na(tob$iso3))
which(is.na(tob$iso3))
View(tob)
View(unique)
add<-data.frame(country="Taiwan", iso3="TWN", LocID=NA)
unique<-bind_rows(unique, add)
View(unique)
write.csv(unique, "new_inputs/allcountryspellings.csv", row.names = F)
tob<-read.csv("Input_Data/tobaccoandalcohol_efficacy5.csv", stringsAsFactors = F)
tob<-left_join(tob, unique%>%rename(Country=country)%>%select(Country, iso3), by="Country")
which(is.na(tob$iso3))
any(is.na(tob$iso3))
#check that all countries have full data for risk factors?
tlocs<-data.frame(iso3=unique(tob$iso3), rf="tobacco+alcohol")
slocs<-data.frame(iso3=unique(int$iso3), rf="salt")
tfalocs<-data.frame(iso3=unique(tfa$iso3), rf="tfa")
check<-full_join(tlocs, slocs)
check<-full_join(check, tfalocs)
View(check)
#check that all countries have full data for risk factors?
tlocs<-data.frame(iso3=unique(tob$iso3), tanda="yes")
slocs<-data.frame(iso3=unique(int$iso3), salt="yes")
tfalocs<-data.frame(iso3=unique(tfa$iso3), tfa="yes")
check<-full_join(tlocs, slocs)
check<-full_join(check, tfalocs)
View(check)
##default to tobacco and alcohol full list
names(int)
##default to tobacco and alcohol full list
names(int)[20]
##default to tobacco and alcohol full list
names(int)[20]<-"Mortality.reduction.salt"
int$Outcome<-"Hypertensive heart disease"
names(int)
unique(tob$Outcome)
names(tfa)
unique(tob$Outcome)[4]
names(tfa)[4]
names(tfa)[4]<-"Mortality.reduction.tfa"
int$Risk<-"Salt"
tfa$Outcome<-"Ischemic heart disease"
tfa$Risk<-"Trans fat"
int$Outcome<-"Hypertensive heart disease"
int$Risk<-"Salt"
int$NCD4<-"yes"
int$self_harm<-"no"
tfa$Outcome<-"Ischemic heart disease"
tfa$Risk<-"Trans fat"
tfa$NCD4<-"yes"
tfa$self_harm<-"no"
int$NCD4<-"yes"
int$NCD.cause.grouping<-"All other cardiovascular diseases"
tfa$NCD.cause.grouping<-"Ischaemic heart disease"
##default to tobacco and alcohol full list
names(int)[20]<-"Mortality.reduction"
names(tfa)[4]<-"Mortality.reduction"
comb<-bind_rows(int%>%select(c(iso3, Mortality.reduction, Outcome, Risk, NCD4, self_harm, NCD.cause.grouping)),
tfa%>%select(c(iso3, Mortality.reduction, Outcome, Risk, NCD4, self_harm, NCD.cause.grouping)))
View(comb)
salt_tfa<-left_join(tlocs, comb, by="iso3")
View(salt_tfa)
salt_tfa<-left_join(tlocs, comb, by="iso3")%>%select(-c(tanda))
salt_tfa<-left_join(tlocs, int%>%select(c(iso3, Mortality.reduction, Outcome, Risk, NCD4, self_harm, NCD.cause.grouping)), by="iso3")%>%select(-c(tanda))
salt<-left_join(tlocs, int%>%select(c(iso3, Mortality.reduction, Outcome, Risk, NCD4, self_harm, NCD.cause.grouping)), by="iso3")%>%select(-c(tanda))
tfa<-left_join(tlocs, tfa%>%select(c(iso3, Mortality.reduction, Outcome, Risk, NCD4, self_harm, NCD.cause.grouping)), by="iso3")%>%select(-c(tanda))
View(sodium.intake)
View(tfa)
write.csv(salt, "salt_policy_effects.csv", row.names = F)
write.csv(salt, "new_inputs/salt_policy_effects.csv", row.names = F)
write.csv(tfa, "new_inputs/tfa_policy_effects.csv", row.names = F)
##check that excluding NCD4 causes and selfharm and adding CKD due to diabetes gives you the correct tobacco and alcohol Outcomes
unique(tob$Outcome)
causes<-read_excel("new_inputs/GHEtoGBD.xlsx")
causes<-read_excel("new_inputs/GBDtoGHE.xlsx")
View(causes)
causes<-read_excel("new_inputs/GBDtoGHE.xlsx")%>%select(ghe)
View(causes)
unique(tob$Outcome)!%in%unique(causes$ghe)
which(unique(tob$Outcome)!%in%unique(causes$ghe))
which(unique(tob$Outcome)%in%unique(causes$ghe))
which(!unique(tob$Outcome)%in%unique(causes$ghe))
which(!unique(tob$Outcome)%in%unique(causes$gbd))
##check that excluding NCD4 causes and selfharm and adding CKD due to diabetes gives you the correct tobacco and alcohol Outcomes
causes<-read_excel("new_inputs/GBDtoGHE.xlsx")
which(!unique(tob$Outcome)%in%unique(causes$gbd))
which(!unique(tob$Outcome[tob$NCD4=="yes"])%in%unique(causes$gbd))
tob$Outcome[tob$NCD4=="yes"][8]
tob$Outcome[tob$NCD4=="yes"]
unique(tob$Outcome[tob$NCD4=="yes"])[8]
unique(tob$Outcome[tob$NCD4=="yes"])
unique(causes$gbd)
which(!unique(tob$Outcome[tob$NCD4=="yes"])%in%unique(causes$gbd))
unique(tob$Outcome[tob$NCD4=="yes"])[22]
unique(tob$Outcome[tob$NCD4=="yes"])[32] #PAD - which we removed
##check that excluding NCD4 causes and selfharm and adding CKD due to diabetes gives you the correct tobacco and alcohol Outcomes
causes<-read_excel("new_inputs/GBDtoGHE.xlsx")
which(!unique(tob$Outcome[tob$NCD4=="yes"])%in%unique(causes$gbd))
unique(tob$Outcome[tob$NCD4=="yes"])[8] #"Esophageal cancer"
unique(tob$Outcome[tob$NCD4=="yes"])[22] #PAD - which we removed
tob<-read.csv("Input_Data/tobaccoandalcohol_efficacy5.csv", stringsAsFactors = F)
unique(tob$Outcome[tob$NCD4=="yes"])[8] #"Esophageal cancer"
tob$Outcome[tob$Outcome=="Oesophageal cancer"]<-"Esophageal cancer"
which(!unique(tob$Outcome[tob$NCD4=="yes"])%in%unique(causes$gbd))
tob$NCD4[tob$Outcome=="Peripheral artery disease"]<-"no"
which(!unique(tob$Outcome[tob$NCD4=="yes"])%in%unique(causes$gbd))
write.csv(tob, "new_inputs/tobaccoandalcohol_efficacy6.csv", row.names = F)
library(readstata13)
library(foreign)
library(dplyr)
library(readxl)
dat <- read.dta13("dths_20age.dta")
dat <- read.dta13("dths_20age.dta")
#only take NCD causes (+all cause) for years 2010-2019
causes<-read_excel("new_inputs/GBDtoGHE.xlsx", sheet=1)
View(causes)
dat<-dat%>%filter(causename %in% unique(causes$ghe))
unique(dat$causename)
#convert to GBD column names and sex/age IDs
dat$sex[dat$sex==1]<-"Male"
dat$sex[dat$sex==2]<-"Female"
