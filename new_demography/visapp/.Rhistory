sdi.gbd <- readxl::read_excel(temp, skip = 1)[-c(105), ] %>%
filter(Location %in% sdi.loc$Location & Location != "Virgin Islands" ) %>%
mutate(iso3 = countrycode(Location, "country.name", "iso3c"))
sdi.gbd
sdi.gbd <- readxl::read_excel(temp, skip = 1)[-c(105), ] %>%
filter(Location %in% sdi.loc$Location & Location != "Virgin Islands" ) %>%
mutate(iso3 = countrycode(Location, "country.name", "iso3c")) %.%
gather(year, sdi, -Location, -iso3)
sdi.gbd <- readxl::read_excel(temp, skip = 1)[-c(105), ] %>%
filter(Location %in% sdi.loc$Location & Location != "Virgin Islands" ) %>%
mutate(iso3 = countrycode(Location, "country.name", "iso3c")) %>%
gather(year, sdi, -Location, -iso3)
sdi.gbd
sdi.gbd <- readxl::read_excel(temp, skip = 1)[-c(105), ] %>%
filter(Location %in% sdi.loc$Location & Location != "Virgin Islands" ) %>%
mutate(iso3 = countrycode(Location, "country.name", "iso3c")) %>%
gather(year, sdi, -Location, -iso3) %>%
mutate(year = as.numeric(year), Location = NULL) %>%
filter(year > 1999)
sdi.gbd
# Filter for country locations (leave out region or subnational; & Georgia in the USA)
temp     <- tempfile(fileext = ".xls")
dataURL  <- "http://databank.worldbank.org/data/download/site-content/CLASS.xls"
download.file(dataURL, destfile=temp, mode='wb')
wbincome <- readxl::read_excel(temp)
wbincome
wbincome <- readxl::read_excel(temp, skip = 4)
wbincome
wbincome <- readxl::read_excel(temp, skip = 4) %>%
filter(Code != "x")
wbincome
wbincome <- readxl::read_excel(temp, skip = 4) %>%
filter(Code != "x") %>%
select(Code, Region, `Income group`) %>%
rename(iso3 = Code, group = "Income group")
wbincome
wbincome$iso3
devtools::install_github('jburos/biostan', build_vignettes=TRUE, dependencies=TRUE)
devtools::install_github('jburos/biostan', build_vignettes = TRUE, dependencies = TRUE)
devtools::install_github('jburos/biostan', build_vignettes = TRUE, dependencies = TRUE)
install.packages("ps")
devtools::install_github('jburos/biostan', build_vignettes = TRUE, dependencies = TRUE)
install.packages("processx")
install.packages("processx")
devtools::install_github('jburos/biostan', build_vignettes = TRUE, dependencies = TRUE)
install,packages("RcppParallel")
install.packages("RcppParallel")
devtools::install_github('jburos/biostan', build_vignettes = TRUE, dependencies = TRUE)
load("C:/Users/William/Dropbox/WHO-COVID-TAG/R/poisson_fit.RData")
install.packages("billionaiRe")
remotes::install_github("caldwellst/billionaiRe", build_vignettes = TRUE)
devtools::install_github("caldwellst/whoville")
remotes::install_github("caldwellst/billionaiRe", build_vignettes = TRUE)
install.packages("withr")
install.packages("withr")
install.packages("withr")
devtools::install_github("caldwellst/whoville")
remotes::install_github("caldwellst/billionaiRe", build_vignettes = TRUE)
library("billionaiRe")
load_billion_data()
library(xmart4)
remotes::install_github("caldwellst/xmart4", build_vignettes = TRUE)
vignette("azure-wims-setup", package = "xmart4")
library(xmart4)
make_azure_rdir()
library(xmart4)
make_azure_rdir()
usethis::edit_r_environ()
shiny::runApp('C:/Users/William/Desktop/UIB/DCP3/CCPM/demtoolrtsl')
runApp('C:/Users/William/Desktop/UIB/DCP3/CCPM/demtoolhci/HCI_app')
runApp('C:/Users/William/Desktop/UIB/DCP3/CCPM/TrimmedTool/app2.R')
runApp('C:/Users/William/Desktop/UIB/DCP3/CCPM/demtoolrtsl')
runApp('C:/Users/William/Desktop/UIB/DCP3/CCPM/demtoolrtsl')
1 - 0.97*0.98
1 - (0.97*0.98)
1 - (0.97*0.98*0.95)
1 - (0.97*0.98*0.95*0.9)
library(highcharter)
categories = c(
'0-4', '5-9', '10-14', '15-19',`
'20-24', '25-29', '30-34', '35-39', '40-44',
'45-49', '50-54', '55-59', '60-64', '65-69',
'70-74', '75-79', '80-84', '85-89', '90-94',
'95-99', '100 + ')
''
'
`
`
load("C:/Users/William/Dropbox/WHO-COVID-TAG/Data/stan_data.Rda")
names(stan_data)
stan_data$X
ata.frame(variable = c("ncdr", "sdi", "Stringency", "Government", "Containment",
"cardiovascular", "over65", "diabetes", "testpositive"),
definition = c("Death rate attributable due to non-communicable diseases in 2019, per 100,000",
"Sociodemographic index, the geometric mean of normalised 0 to 1 indices fertility, education and income",
"Stringency Index for ‘lockdown style’ policies scaled to a value from 0 to 100 (100 = strictest response)",
"Overall government response index 0 to 100",
"Containment and health index (which combines ‘lockdown’ restrictions and closures) 0 to 100",
"Death rate attributable due to cardiovascular diseases in 2017, per 100,000",
"Proportion of the population that is 65 years and older, most recent year available, 0 to 1",
"Diabetes prevalence (% of population aged 20 to 79) in 2017, 0 to 100",
"Proportion of COVID-19 tests that are positive, 0 to 1"))
data.frame(variable = c("ncdr", "sdi", "Stringency", "Government", "Containment",
"cardiovascular", "over65", "diabetes", "testpositive"),
definition = c("Death rate attributable due to non-communicable diseases in 2019, per 100,000",
"Sociodemographic index, the geometric mean of normalised 0 to 1 indices fertility, education and income",
"Stringency Index for ‘lockdown style’ policies scaled to a value from 0 to 100 (100 = strictest response)",
"Overall government response index 0 to 100",
"Containment and health index (which combines ‘lockdown’ restrictions and closures) 0 to 100",
"Death rate attributable due to cardiovascular diseases in 2017, per 100,000",
"Proportion of the population that is 65 years and older, most recent year available, 0 to 1",
"Diabetes prevalence (% of population aged 20 to 79) in 2017, 0 to 100",
"Proportion of COVID-19 tests that are positive, 0 to 1"))
data.frame(variable = c("ncdr", "sdi", "Stringency", "Government", "Containment",
"cardiovascular", "over65", "diabetes", "testpositive"),
definition = c("Death rate attributable due to non-communicable diseases in 2019, per 100,000",
"Sociodemographic index, the geometric mean of normalised 0 to 1 indices fertility, education and income",
"Stringency Index for ‘lockdown style’ policies scaled to a value from 0 to 100 (100 = strictest response)",
"Overall government response index 0 to 100",
"Containment and health index (which combines ‘lockdown’ restrictions and closures) 0 to 100",
"Death rate attributable due to cardiovascular diseases in 2017, per 100,000",
"Proportion of the population that is 65 years and older, most recent year available, 0 to 1",
"Diabetes prevalence (% of population aged 20 to 79) in 2017, 0 to 100",
"Proportion of COVID-19 tests that are positive, 0 to 1"))
1.3/0.86
1.5/0.86
1.4/0.86
# Sum of reported deaths on WHO website
library(dplyr)
library(tidyr)
library(data.table)
# Cumulative to last day of 2020
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date == as.Date("2020-12-31", "%Y-%m-%d")) %>%
pull(Cumulative_deaths) %>% sum()
# Cumulative to first day of 2021
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date == as.Date("2021-01-01", "%Y-%m-%d")) %>%
pull(Cumulative_deaths) %>% sum()
# All new deaths till last day of 2020
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date <= as.Date("2020-12-31", "%Y-%m-%d")) %>%
pull(New_deaths) %>% sum(., na.rm = T)
# All new deaths till last day of 2021
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date <= as.Date("2021-01-01", "%Y-%m-%d")) %>%
pull(New_deaths) %>% sum(., na.rm = T)
library(dplyr)
library(tidyr)
library(data.table)
# Cumulative to last day of 2020
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date == as.Date("2020-12-31", "%Y-%m-%d")) %>%
pull(Cumulative_deaths) %>% sum()
din <- fread("https://covid19.who.int/WHO-COVID-19-global-data.csv")
names(din)
table(din$Country_code)
> library(dplyr)
> library(tidyr)
> library(data.table)
>
> # Cumulative to last day of 2020
> fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
+   mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
+   filter(date >= as.Date("2020-01-01", "%Y-%m-%d") & date <= as.Date("2020-12-31", "%Y-%m-%d")) %>%
+   pull(New_deaths) %>% sum()
Downloaded 947429 bytes...[1] 1813188
library(dplyr)
library(tidyr)
library(data.table)
# Cumulative to last day of 2020
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date >= as.Date("2020-01-01", "%Y-%m-%d") & date <= as.Date("2020-12-31", "%Y-%m-%d")) %>%
pull(New_deaths) %>% sum()
Downloaded 947429 bytes...[1] 1813188
library(dplyr)
library(tidyr)
library(data.table)
# Cumulative to last day of 2020
fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(date = as.Date(Date_reported,"%y-%m-%d")) %>%
filter(date >= as.Date("2020-01-01", "%Y-%m-%d") & date <= as.Date("2020-12-31", "%Y-%m-%d")) %>%
pull(New_deaths) %>% sum()
1 - (2*0.05 + 0.05)/3
1 - (0.5*0.05 + 0.25*0.05)/0.75
1 - (0.5*0.05 + 0.25*0.05)
130000 + 84 000 + 100000 + 100000
130000 + 84000 + 100000 + 100000
130000 + 3000*3*14 + 100000 + 100000
80/194
(50 + 15)/(53 + 35)
16/106
load("C:/Users/William/Desktop/WHO/ExcessMortality/Data/non_joint_model_draws_restrict.RData")
getwd()
#####################################################################################################################################
# House keeping
rm(list = ls(all = TRUE))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(data.table, lubridate, tidyr, dplyr, countrycode, ggplot2)
#####################################################################################################################################
# Additional files for analysis
#####################################################################################################################################
select <- dplyr::select
# 1) Codes for mapping iso2 to iso3 for WHO public data
# 2) Total population numbers by country for 2020 (WPP2019 for 194 Member States)
# 3) GHE data by broad cause group, age, sex and year 2000 to 2019 (183/194 member states)
# 4) GBD data by broad cause group, age, sex and year 2000 to 2019 (11/194 member states)
ccodes      <- fread("https://www.dropbox.com/s/hoefrsvbk3lz389/ccodes.csv?dl=1")
population  <- fread("https://www.dropbox.com/s/nfmbu67o03kw8o4/population.csv?dl=1")
gheg3       <- fread("https://www.dropbox.com/s/cigt1ahro12qers/group3causes_ghe_183.csv?dl=1") %>%
mutate(sex       = factor(sex, labels = c("Male", "Female")),
causename = case_when(causename == "All Causes" ~ "All",
causename == "Communicable, maternal, perinatal and nutritional conditions" ~ "Communicable",
causename == "Noncommunicable diseases" ~ "Noncommunicable",
TRUE ~ as.character(causename))) %>%
select(iso3, year, age, sex, causename, dths)
gbdg3       <- fread("https://www.dropbox.com/s/5hpa957mbzk9mrs/group3causes_gbd_11.csv?dl=1") %>%
rename(agel = age, causename = cause, dths = val) %>%
left_join(data.table(iso3 = c("AND","COK","DMA","MHL","MCO","NRU","NIU","PLW","KNA","SMR","TUV"),
location = c("Andorra", "Cook Islands", "Dominica", "Marshall Islands","Monaco",
"Nauru", "Niue", "Palau", "Saint Kitts and Nevis", "San Marino", "Tuvalu")), by = "location") %>%
left_join(data.table(age = seq(0,85,5), agel = c("Under 5", paste(seq(5,80,5),"to",seq(5,80,5)+4),"85 plus")), by="agel") %>%
mutate(sex       = factor(sex, levels = c("Male", "Female")),
causename = case_when(causename == "All causes" ~ "All",
causename == "Communicable, maternal, neonatal, and nutritional diseases" ~ "Communicable",
causename == "Non-communicable diseases" ~ "Noncommunicable",
TRUE ~ as.character(causename))) %>%
select(iso3, year, age, sex, causename, dths)
# Combine the GHE and GBD based broad cause numbers
group3_194   <- rbind(gheg3, gbdg3) %>%
group_by(iso3, year, causename) %>% summarise(dths = sum(dths), .groups = "drop") %>% ungroup() %>%
pivot_wider(., names_from = causename, values_from = dths) %>%
arrange(iso3, year) %>% right_join(population, by = c("iso3","year"))
# Use the 2019 rates for NCDs, Communicable diseases and injuries as potential covariates
covariate.ghe<- group3_194 %>%
filter(year == 2019)  %>% select(-c(year, All)) %>%
gather(cause, val, -iso3, -pop) %>% mutate(val=1e5*val/pop) %>% spread(cause, val) %>% mutate(pop=NULL)
#####################################################################################################################################
# Time-series random walk order 2 for forecast of expected deaths in 2020
#####################################################################################################################################
# Function to forecast the GHE all cause deaths for a single year
expected.ghe <- function(){
set.seed(12345)
iso.list   <- sort(unique(group3_194$iso3)) # vector of iso3 to loop through;
ex.list    <- list()                        # empty list to store expected values in;
for (i in 1:194){
print(paste0(round(100*i/194,1), "%"))
group3.subset <- group3_194 %>% filter(iso3 == iso.list[i]) %>%
arrange(year) %>% select(iso3, year, All) %>% mutate(lall = log(All))
fit         <- inla(lall ~ f(year, model = "rw2"), data = group3.subset, control.predictor= list(compute=TRUE))
fit.out     <- data.table(expected = exp(fit$summary.fitted.values$mean),
fit.l    = exp(fit$summary.fitted.values$"0.025quant"),
fit.u    = exp(fit$summary.fitted.values$"0.975quant"))
ex.list[[i]]<- cbind(group3.subset %>% mutate(lall = NULL), fit.out)
}
rbindlist(ex.list)
}
# takes a few min to run the function
# expected.out <- expected.ghe()
# fwrite(expected.out, file = "Data/expected.out.csv", row.names = F)
# loading the saved output from run
expected.out <- fread("https://www.dropbox.com/s/yjr1s99s2cmdpdb/expected.out.csv?dl=1")
ghe.expected <- expected.out %>%
filter(year == 2020) %>% select(iso3, expected) %>%
mutate(expected = round(0.25*expected), observed = NA)
ghe.expected <- rbind(ghe.expected %>% mutate(quarter = "q1"),
ghe.expected %>% mutate(quarter = "q2"),
ghe.expected %>% mutate(quarter = "q3"),
ghe.expected %>% mutate(quarter = "q4")) %>% arrange(iso3, quarter)
# Standard deviation of GHE estimates
ghe.s <- expected.out %>% filter(year == 2020) %>%
dplyr::select(-c(All)) %>% mutate(ghe.sd      = round(0.25*(fit.u - fit.l)),
ghe.sd.prop = ghe.sd/expected) %>%
select(iso3, ghe.sd, ghe.sd.prop)
#####################################################################################################################################
# WHO COVID case and death data by date and country
#####################################################################################################################################
# Read in the WHO data and clean up some of the names
who_df      <- fread("https://covid19.who.int/WHO-COVID-19-global-data.csv") %>%
mutate(Country_code = ifelse(Country == "Namibia", "NA", Country_code)) %>%
left_join(ccodes, by = "Country_code") %>%
mutate(Country = case_when(Country == "CuraÃ§ao" ~ "Curacao",
Country == "Saint BarthÃ©lemy" ~ "Saint Barthelemy",
Country == "RÃ©union" ~ "Reunion",
Country == "Kosovo[1]" ~ "Kosovo",
Country %in% c("Bonaire","Saba","Sint Eustatius") ~ "Bonaire, Sint Eustatius and Saba",
TRUE ~ as.character(Country)),
iso3    = case_when(Country == "Kosovo" ~ "XKX",
Country == "Saint Martin"~ "MAF",
Country == "Sint Maarten"~ "SXM",
Country == "Bonaire, Sint Eustatius and Saba" ~ "BES",
Country == "Curacao" ~ "CUW",
Country == "Saint Barthelemy" ~ "BLM",
Country == "South Sudan" ~ "SSD",
Country == "Namibia" ~ "NAM",
TRUE ~ as.character(iso3)),
date    = as.Date(Date_reported,"%y-%m-%d")) %>%
rename(cov_cases  = Cumulative_cases, cov_deaths = Cumulative_deaths)
#####################################################################################################
# Dummy data for WHDH
dummy_df <- who_df %>% mutate(date  = as.Date(date,"%m/%d/%y"),
week  = lubridate::week(ymd(date)),
year  =  lubridate::year(ymd(date))) %>%
filter(year == 2020 | date == "2021-01-01") %>%
mutate(week = ifelse(year == 2021, 53, week)) %>%
group_by(iso3, WHO_region, week) %>%
summarise(covid_deaths = sum(New_deaths), covid_cases = sum(New_cases), .groups = "drop") %>%
ungroup() %>%  right_join(population %>% filter(year == 2020), by = "iso3")
dummy_pop  <- dummy_df %>% select(iso3, WHO_region, pop) %>% distinct() %>%
group_by(WHO_region) %>% summarise(population = sum(pop), .groups = "drop") %>% ungroup()
dummy_pop <- dummy_pop %>% summarise(population = sum(population)) %>%
mutate(WHO_region = "All member states") %>% rbind(dummy_pop)
dummy_df <- dummy_df %>%
group_by(WHO_region, week) %>%
summarise(covid_cases = sum(covid_cases), covid_deaths = sum(covid_deaths),
.groups = "drop") %>% ungroup()
dummy_df <- dummy_df %>% group_by(week) %>%
summarise(covid_cases = sum(covid_cases), covid_deaths = sum(covid_deaths),
.groups = "drop") %>%
mutate(WHO_region = "All member states") %>%
ungroup() %>% rbind(dummy_df) %>%
left_join(dummy_pop, by = "WHO_region") %>%
mutate(population = population *1e-6) %>%
select(WHO_region, population, week, covid_cases, covid_deaths)
save(dummy_df, file = "Data/dummy_df1.Rda")
########################################################################################################
# Subset to the 194 member states and aggregate cases and deaths by quarter of death
who_2020_194 <- who_df %>%
filter(date =="2020-04-01" | date =="2020-07-01"| date =="2020-10-01" | date =="2021-01-01") %>%
mutate(period = case_when(date == "2020-04-01" ~ "p1",
date == "2020-07-01" ~ "p2",
date == "2020-10-01" ~ "p3",
date == "2021-01-01" ~ "p4")) %>%
select(Country, iso3, WHO_region, period, cov_cases, cov_deaths) %>%
gather(source, val, -Country, -iso3, -WHO_region, -period) %>%
group_by(Country, iso3, WHO_region, period, source) %>%
summarise(val = sum(val, na.rm = T), .groups = "drop") %>% ungroup() %>%
spread(period, val) %>%
mutate(q1 = p1, q2 = p2 - p1, q3 = p3 - p2, q4 = p4 - p3) %>%
select(-c(p1, p2, p3, p4)) %>%
gather(quarter, val, -Country, -iso3, -WHO_region, -source) %>%
spread(source, val) %>%
right_join(population %>% filter(year == 2020), by = "iso3") %>%
mutate(WHO_region = factor(WHO_region,
levels = c("AFRO","AMRO","EMRO","EURO","SEARO","WPRO"))) %>%
arrange(iso3, quarter) %>%
group_by(iso3) %>%
mutate(cc_all = 1e5*sum(cov_cases)/pop, cd_all = 1e5*sum(cov_deaths)/pop) %>% ungroup()
#####################################################################################################################################
# SDI data from GBD and Income group from World Bank
#####################################################################################################################################
# SDI, filter for country locations (leave out region or subnational; & Georgia in the USA)
sdi.loc <- fread("https://www.dropbox.com/s/vhajcoyzw08wb8l/sdi.country.csv?dl=1")
temp    <- tempfile(fileext = ".xlsx")
dataURL <- "http://ghdx.healthdata.org/sites/default/files/record-attached-files/IHME_GBD_2019_SDI_1990_2019_Y2020M10D15.XLSX"
download.file(dataURL, destfile=temp, mode='wb')
sdi.gbd <- readxl::read_excel(temp, skip = 1)[-c(105), ] %>%
filter(Location %in% sdi.loc$Location & Location != "Virgin Islands" ) %>%
mutate(iso3 = countrycode(Location, "country.name", "iso3c")) %>%
gather(year, sdi, -Location, -iso3) %>%
mutate(sdi=as.numeric(gsub( "·", ".",sdi)), year = as.numeric(year), Location = NULL) %>%
filter(year == 2019 & iso3 %in% unique(population$iso3)) %>%
select(-c(year))
# Income group from World Bank, assume Cook Islands and Niue are upper middle income like Tonga and Tuvalu
temp     <- tempfile(fileext = ".xls")
dataURL  <- "http://databank.worldbank.org/data/download/site-content/CLASS.xls"
download.file(dataURL, destfile=temp, mode='wb')
wbincome <- readxl::read_excel(temp, skip = 4) %>%
filter(Code != "x") %>%
select(Code, `Income group`) %>%
rename(iso3 = Code, group = "Income group") %>%
filter(iso3 %in% unique(population$iso3))
wb_oth   <- wbincome  %>%
filter(iso3 %in% c("TON","TUV")) %>% mutate(iso3 = c("COK", "NIU"))
wbincome <- wbincome %>% rbind(wb_oth)
#####################################################################################################################################
# Observed compiled data from Karlinsky et al and multiple sources
#####################################################################################################################################
# The baseline are forcasted by time using the linear regression function
# Will compare the aggregate for Ariels forecasts to the aggregate GHE forecasts
# https://github.com/dkobak/excess-mortality
baseline_data <- fread("https://raw.github.com/dkobak/excess-mortality/main/baselines.csv") %>%
rename(country = V1, time = V2, expected = V3) %>%
filter(!(country %in% c("Kosovo", "Transnistria"))) %>%
mutate(iso3 = countrycode(country, "country.name", "iso3c"), country = NULL)
#####################################################################################################################################
# Compare GHE forecast to Karlinsky et al
karlinsky_compare <- baseline_data %>% group_by(iso3) %>%
summarize(All = sum(expected), .groups = "drop") %>%
mutate(year = 2020, source = "Karlinsky (WMD)", fit.m = NA, fit.l = NA, fit.u = NA) %>%
filter(iso3 %in% unique(population$iso3))
ghefore_compare   <- expected.out %>% rename(fit.m = expected) %>% mutate(source = "WHO (GHE)")
compare_baseline  <- rbind(ghefore_compare, karlinsky_compare) %>%
mutate(source = factor(source, levels = c("WHO (GHE)","Karlinsky (WMD)"))) %>%
left_join(population, by = c("iso3","year")) %>%
mutate(All = 1e5*All/pop, fit.m = 1e5*fit.m/pop, fit.l = 1e5*fit.l/pop, fit.u = 1e5*fit.u/pop) %>%
filter(year > 2010)
compareplot <- ggplot() +
geom_ribbon(data = compare_baseline %>% filter(!is.na(fit.m)), aes(x = year, ymin = fit.l, ymax = fit.u, fill = source), alpha = 0.2, na.rm = T) +
geom_point(data = compare_baseline, aes(x = year, y = All, fill = source, shape = source),
na.rm = T, col = "black") +
geom_line(data = compare_baseline %>% filter(!is.na(fit.m)), aes(x = year, y = fit.m, col = source), na.rm = T) +
labs(title = "Total deaths by year and source", x = "Year", y = "Deaths per 100,000 population") +
theme_bw() + facet_wrap("iso3", ncol = 6) +
scale_x_continuous(breaks=seq(2011,2020,2)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position="top", legend.title = element_blank())  +
scale_color_manual(breaks = c("WHO (GHE)", "Karlinsky (WMD)"),
values=c("#984EA3", "#4DAF4A")) +
scale_fill_manual(breaks = c("WHO (GHE)", "Karlinsky (WMD)"),
values=c("#984EA3", "#4DAF4A")) +
scale_shape_manual(breaks = c("WHO (GHE)", "Karlinsky (WMD)"),
values=c(21, 23)) + guides(col=FALSE)
save(compareplot, file = "Data/compareplot.Rda")
#####################################################################################################################################
# Pull the collated observed data from World Mortality Data
# This step is replicated using HMD, EUROMOMO etc when doing age-disaggregated analysis
observed.df   <- fread("https://raw.github.com/akarlinsky/world_mortality/main/world_mortality.csv", header = T) %>%
filter(!(country_name %in% c("Kosovo", "Transnistria", "Nicaragua","El Salvador")) & year == 2020 &
time_unit != "quarterly (Solar Hijri)") %>%
mutate(iso3 = countrycode(country_name, "country.name", "iso3c")) %>%
left_join(baseline_data, by = c("iso3","time")) %>%
mutate(quarter = ifelse((time_unit == "weekly" & time >= 1 & time <= 13)|
(time_unit == "monthly" & time >= 1 & time <= 3)|
(time_unit == "quarterly" & time == 1), "q1",
ifelse((time_unit == "weekly" & time >= 14 & time <= 26)|
(time_unit == "monthly" & time >= 4 & time <= 6)|
(time_unit == "quarterly" & time == 2), "q2",
ifelse((time_unit == "weekly" & time >= 27 & time <= 39)|
(time_unit == "monthly" & time >= 7 & time <= 9)|
(time_unit == "quarterly" & time == 3), "q3", "q4")))) %>%
group_by(iso3, quarter) %>%
summarise(observed = sum(deaths, na.rm = T), expected = sum(expected, na.rm = T), .groups = "drop") %>% ungroup()
expected.df  <- ghe.expected %>% filter(!(iso3 %in% observed.df$iso3)) %>% rbind(observed.df)
#####################################################################################################################################
# Oxford tracker data on government policy (https://www.nature.com/articles/s41562-021-01079-8)
# Use medians for the quarter to get summary statistic
# Infill missing countries with WHO region means
covid_pol    <- fread("https://github.com/OxCGRT/covid-policy-tracker/raw/master/data/OxCGRT_latest.csv")
covid_pol_df <- covid_pol %>%
rename(iso3 = CountryCode) %>%
mutate(quarter = ifelse(Date < 20200401, "q1", ifelse(Date < 20200701, "q2", ifelse(Date < 20201001, "q3", "q4")))) %>%
group_by(iso3, quarter) %>%
summarize(Stringency = median(StringencyIndex, na.rm = T),
Government = median(GovernmentResponseIndex, na.rm = T),
Containment = median(ContainmentHealthIndex, na.rm = T),
Economic = mean(EconomicSupportIndex, na.rm = T), .groups = "drop") %>%
ungroup() %>% filter(!is.na(Stringency)) %>%
right_join(who_2020_194 %>% select(iso3, WHO_region, quarter), by = c("iso3", "quarter")) %>%
group_by(WHO_region, quarter) %>%
mutate(Stringency = ifelse(is.na(Stringency), mean(Stringency, na.rm = T), Stringency),
Government = ifelse(is.na(Government), mean(Government, na.rm = T), Government),
Containment = ifelse(is.na(Containment), mean(Containment, na.rm = T), Containment),
Economic = ifelse(is.na(Economic), mean(Economic, na.rm = T), Economic)) %>%
ungroup() %>% mutate(WHO_region = NULL)
#####################################################################################################################################
# Our world in Data
#####################################################################################################################################
select <- dplyr::select
owid <- fread("https://covid.ourworldindata.org/data/owid-covid-data.csv") %>%
rename(iso3 = iso_code) %>%
mutate(date = as.Date(date, "%Y-%m-%d")) %>%
select(iso3, date,
"gdp_per_capita", "human_development_index", "cardiovasc_death_rate", "diabetes_prevalence",
"population_density", "median_age", "aged_65_older", "life_expectancy", "positive_rate") %>%
mutate(year  =  lubridate::year(lubridate::ymd(date)),
quarter = ifelse(date < as.Date("2020-04-01", "%Y-%m-%d"), "q1",
ifelse(date < as.Date("2020-07-01", "%Y-%m-%d"), "q2",
ifelse(date < as.Date("2020-10-01", "%Y-%m-%d"), "q3", "q4"))),
date = NULL) %>%
filter(year == 2020) %>%
group_by(iso3, quarter) %>%
summarise(gdp_per_capita = median(gdp_per_capita, na.rm = T),
human_development_index = median(human_development_index, na.rm = T),
cardiovasc_death_rate = median(cardiovasc_death_rate, na.rm = T),
diabetes_prevalence = median(diabetes_prevalence, na.rm = T),
population_density = median(population_density, na.rm = T),
median_age = mean(median_age, na.rm = T),
aged_65_older = median(aged_65_older, na.rm = T),
life_expectancy = median(life_expectancy, na.rm = T),
positive_rate = median(positive_rate, na.rm = T),
.groups = "drop") %>%
ungroup()
library(doParallel)
load("C:/Users/William/Dropbox/WHO-COVID-TAG/WilliamData/stan_data_new.Rda")
stan_data_new
shiny::runApp('C:/Users/William/Dropbox/NCDs/new_demography')
setwd("C:/Users/William/Dropbox/NCDs/new_demography/visapp")
##########################
## load packages
##########################
library(shiny)
library(shinythemes)
library(shinydashboard)
library(data.table)
library(dplyr)
library(tidyr)
library(highcharter)
library(MortalityLaws)
##########################
## get required functions
##########################
load("../../new_inputs/PreppedData.Rda")
source("../utils/demmod_icer_rank.R")
load("../utils/obs.wpp.Rda")
runApp()
